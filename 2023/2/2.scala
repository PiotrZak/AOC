
#generated by chatGpt

import scala.util.matching.Regex

object Main extends App {

  val colors = List("red", "green", "blue")
  val possibleLimits = Map("red" -> 12, "green" -> 13, "blue" -> 14)

  val resetSign = ";"
  val gameIdentifier = ":"
  val numPattern: Regex = """(\d+)""".r

  val lines = List("Game 1: 1 blue, 2 green, 3 red; 7 red, 8 green; 1 green, 2 red, 1 blue; 2 green, 3 red, 1 blue; 8 green, 1 blue")

  def checkIfExceedLimit(bag: Map[String, Int]): Boolean =
    colors.forall(color => bag.getOrElse(color, 0) <= possibleLimits(color))

  var gamesIds = 0

  for (game <- lines) {
    val gameId = numPattern.findFirstMatchIn(game.split(gameIdentifier)(0)).get.group(1).toInt

    val setsWithGame = game.split(resetSign)

    // ['3 blue, 4 red', '1 red, 2 green, 6 blue', '2 green']
    val sets = setsWithGame.map(_.split(gameIdentifier, 2).last.trim)

    val gamePossible = sets.forall { setStr =>
      val bag = setStr.split(',').map(_.trim.split(' ')).map { case Array(quantity, color) => color -> quantity.toInt }.toMap
      checkIfExceedLimit(bag)
    }

    if (gamePossible) {
      gamesIds += gameId
    }
  }

  println(s"Total game IDs where all sets are possible: $gamesIds")
}