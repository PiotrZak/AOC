# generated by chat gpt to check how is the implementation in scala.

import scala.io.Source
import scala.util.matching.Regex

object Main extends App {
  // Read the input file into a list of strings
  val board: List[String] = Source.fromFile("3.txt").getLines().toList

  // Create a mutable Map to store coordinates and numbers
  var coordsChars: Map[(Int, Int), List[Int]] = Map()

  // Iterate over each row and find number occurrences
  for ((row, r) <- board.zipWithIndex) {
    // Define a regular expression to find numbers in each row
    val numberPattern: Regex = """\d+""".r

    // Find all matches in the current row
    for (n <- numberPattern.findAllMatchIn(row)) {
      // Define the coordinates of the edge of the number
      val edge: Set[(Int, Int)] = Set((r - 1, n.start - 1), (r, n.start - 1), (r + 1, n.start - 1),
        (r - 1, n.end), (r, n.end), (r + 1, n.end), (r - 1, n.start), (r + 1, n.start),
        (r - 1, n.end + 1), (r, n.end + 1), (r + 1, n.end + 1))

      // Check if the number is adjacent to a symbol
      for (o <- edge.intersect(coordsChars.keys.toSet)) {
        coordsChars += o -> (coordsChars.getOrElse(o, List()) :+ n.toString.toInt)
      }
    }
  }

  // Calculate the sums as in the original Python code
  val sum1: Int = coordsChars.values.map(_.sum).sum
  val sum2: Int = coordsChars.values.filter(_.length == 2).map(_.product).sum

  // Print the results
  println(sum1)
  println(sum2)
}